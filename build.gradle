apply plugin:  'java'
apply plugin:  'distribution'
apply plugin:  'org.unbroken-dome.test-sets'

ext {
    kafkaVersion = '2.4.1'
    solaceJavaAPIVersion = '10.6.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

buildscript {
    repositories {
        maven {
           url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.spotbugs:spotbugs-gradle-plugin:3.0.0"
        classpath "org.unbroken-dome.test-sets:org.unbroken-dome.test-sets.gradle.plugin:2.2.1"
    }
}

testSets {
    integrationTest
}

dependencies {
    integrationTestImplementation 'junit:junit:4.12'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    integrationTestImplementation 'org.junit.platform:junit-platform-engine:1.5.2'
    integrationTestImplementation 'org.mockito:mockito-core:3.2.4'
    integrationTestImplementation 'org.mockito:mockito-junit-jupiter:3.2.4'
    integrationTestImplementation 'org.testcontainers:testcontainers:1.12.4'
    integrationTestImplementation 'org.testcontainers:junit-jupiter:1.12.4'
    integrationTestImplementation 'org.slf4j:slf4j-api:1.7.30'
    integrationTestImplementation 'org.slf4j:slf4j-simple:1.7.30'
    integrationTestImplementation 'org.apache.commons:commons-configuration2:2.6'
    integrationTestImplementation 'commons-beanutils:commons-beanutils:1.9.4'
    integrationTestImplementation 'com.google.code.gson:gson:2.3.1'
    integrationTestImplementation 'commons-io:commons-io:2.4'
    integrationTestImplementation 'com.squareup.okhttp3:okhttp:4.4.0'
    integrationTestImplementation 'org.apache.kafka:kafka-clients:2.4.1'
    compile "org.apache.kafka:connect-api:$kafkaVersion"
    compile "com.solacesystems:sol-jcsmp:$solaceJavaAPIVersion"
}

task('prepDistForIntegrationTesting') {
    dependsOn assembleDist
    doLast {
        copy { 
            from zipTree(file('build/distributions').listFiles().findAll {it.name.endsWith('.zip')}[0])
            into (file('src/integrationTest/resources'))
        }
        copy {
            from zipTree(file('build/distributions').listFiles().findAll {it.name.endsWith('.zip')}[0])
            into (file('build/resources/integrationTest'))
        }
    }
}

project.integrationTest {
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    dependsOn prepDistForIntegrationTesting
}

distributions {
    main {
        contents {
            from('etc/solace_source.properties') { into 'etc' }
            from('etc/solace_source_properties.json') { into 'etc' }
            from('doc/README.md') { into 'doc' }
            from('LICENSE') { into 'doc' }
            into('lib') {
                from jar
                from(project.configurations.runtime)
            }
            // from jar
        }
    }
}
